unsetopt auto_name_dirs
export PATH=~/bin:$PATH
export PATH=$PATH:/usr/local/sbin 
export PATH=/usr/local/bin:$PATH

export EDITOR="vim"
export MAKEFILES=~/Makefile
export HISTFILE=~/.histfile
export HISTSIZE=1000000
export SAVEHIST=1000000
setopt autocd 
setopt pushdignoredups
setopt autopushd
setopt rmstarsilent
setopt extended_glob
setopt extended_history
unsetopt beep

bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '~/.zshrc'

autoload -Uz compinit
autoload zmv
compinit


#ZLS_COLORS=$LS_COLORS
# End of lines added by compinstalli
# . ~/core/git-prompt/git-prompt.sh
export TERM=xterm-color

#Prompt Color Table Z shell
fg_black=$'\e[0;30m'
fg_red=$'\e[0;31m'
fg_green=$'\e[0;32m'
fg_brown=$'\e[0;33m'
fg_blue=$'\e[0;34m'
fg_purple=$'\e[0;35m'
fg_cyan=$'\e[0;36m'
fg_lgray=$'\e[0;37m'
fg_dgray=$'\e[1;30m'
fg_lred=$'\e[1;31m'
fg_lgreen=$'\e[1;32m'
fg_yellow=$'\e[1;33m'
fg_lblue=$'\e[1;34m'
fg_pink=$'\e[1;35m'
fg_lcyan=$'\e[1;36m'
fg_white=$'\e[1;37m'
#Text Background Colors
bg_red=$'\e[0;41m'
bg_green=$'\e[0;42m'
bg_brown=$'\e[0;43m'
bg_blue=$'\e[0;44m'
bg_purple=$'\e[0;45m'
bg_cyan=$'\e[0;46m'
bg_gray=$'\e[0;47m'
#Attributes
at_normal=$'\e[0m'
at_bold=$'\e[1m'
at_italics=$'\e[3m'
at_underl=$'\e[4m'
at_blink=$'\e[5m'
at_outline=$'\e[6m'
at_reverse=$'\e[7m'
at_nondisp=$'\e[8m'
at_strike=$'\e[9m'
at_boldoff=$'\e[22m'
at_italicsoff=$'\e[23m'
at_underloff=$'\e[24m'
at_blinkoff=$'\e[25m'
at_reverseoff=$'\e[27m'
at_strikeoff=$'\e[29m'

PS1=$'$(prompt_git_info)%{$terminfo[bold]$fg[blue]%}:%{\e[0m%}%{$terminfo[bold]$fg[green]%}%~%{\e[0m%} $ '
if [ -n "$SSH_TTY" ]; then
  ip_address=`echo $SSH_CONNECTION | cut -f3 -d' '` 
  PS1=$'${fg_red}%M${at_normal}${fg_cyan}/$ip_address${at_normal}%{$terminfo[bold]$fg[blue]%}:%{\e[0m%}%{$terminfo[bold]$fg[green]%}%~%{\e[0m%} $ '
fi

# Text color variables
export txtund=$(tput sgr 0 1)     # Underline
export txtbld=$(tput bold)        # Bold
export txtred=$(tput setaf 1)     # Red
export txtgrn=$(tput setaf 2)     # Green
export txtylw=$(tput setaf 3)     # Yellow
export txtblu=$(tput setaf 4)     # Blue
export txtpur=$(tput setaf 5)     # Purple
export txtcyn=$(tput setaf 6)     # Cyan
export txtwht=$(tput setaf 7)     # White
export txtrst=$(tput sgr0)        # Text reset
export txtund=$(tput sgr 0 1)           # Underline
export txtbld=$(tput bold)              # Bold
export bldred=${txtbld}$(tput setaf 1)  #  red
export bldblu=${txtbld}$(tput setaf 4)  #  blue
export bldwht=${txtbld}$(tput setaf 7)  #  white
export bldgrn=${txtbld}${txtgrn}
export alert=${bldgrn}
export txtrst=$(tput sgr0)              # Reset
info=${bldwht}*${txtrst}         # Feedback
pass=${bldblu}*${txtrst}
warn=${bldred}!${txtrst}


# commit git repo and push to github
function gpm {
    message=$1
    git commit -a -m $message
    git push --all
}

function git-clean-branch {
    branch=$1
    optional_starting_point = $2
    git checkout --orphan $branch $optional_starting_point
    git rm -rf .
    echo "${alert} Empty branch ${bldwht}$1${alert} created!"
}

# spp hostname user
# #to copy my ssh key to login to host as user
function copy_public_ssh_key_to_host {
    host=${1:=${VPS}}
    user=$2 
    : ${user:=root}
    ssh-copy-id -i ~/.ssh/id_rsa $user@$host
}

function lowercase {
 cat $1 |sed 's/\(.*\)/\L\1/'
}


function greenfield {
  host=${1:=${VPS}}
  user=${2:=sid137}
  ssh-copy-id -i ~/.ssh/id_rsa $user@$host
  scp ~/.ssh/vps-github $user@$host:~/.ssh/
  scp ~/.ssh/vps-github.pub $user@$host:~/.ssh

  # Create a ssh/config file so we can connect to git
  # http://stackoverflow.com/a/1655389/262972
IFS='\n' read -r -d '' ssh_config << 'EOF'
Host github.com
    IdentityFile ~/.ssh/vps-github
    User git
EOF

# another syntax http://serverfault.com/a/249095
ssh $user@$host << EOS
  echo '"$ssh_config"' >> ~/.ssh/config
  git clone -b minimal git@github.com:sid137/core.git
  ./core/symlink.sh
  chsh -s `which zsh` $user
EOS
}

function initialize {
  rm .ssh/known_hosts
  server=${1:=${VPS}}
  role=$2
  : ${role:=rails}

  ssh-copy-id -i ~/.ssh/id_rsa root@$server
  ssh root@$1 "wget http://github.com/sid137/chef-repo/raw/master/install.sh -O install.sh && /bin/bash -x install.sh ${role}" 
}

function color-list {
    # Text color variables
    txtund=$(tput sgr 0 1)          # Underline
    txtbld=$(tput bold)             # Bold
    bldred=${txtbld}$(tput setaf 1) #  red
    bldblu=${txtbld}$(tput setaf 4) #  blue
    bldwht=${txtbld}$(tput setaf 7) #  white
    txtrst=$(tput sgr0)             # Reset
    info=${bldwht}*${txtrst}        # Feedback
    pass=${bldblu}*${txtrst}
    warn=${bldred}!${txtrst}

    echo
    echo -e "$(tput bold) reg  bld  und   tput-command-colors$(tput sgr0)"

    for i in $(seq 1 7); do
    echo " $(tput setaf $i)Text$(tput sgr0) $(tput bold)$(tput setaf $i)Text$(tput sgr0) $(tput sgr 0 1)$(tput setaf $i)Text$(tput sgr0)  \$(tput setaf $i)"
    done

    echo ' Bold            $(tput bold)'
    echo ' Underline       $(tput sgr 0 1)'
    echo ' Reset           $(tput sgr0)'
}

# Usage: gawk $filename
#
# Returns the number of columns in a tab-delimited file $fileename
#
# Improvements: pass options to specify the delimiter character.  Currently only
# uses the tab delimiter
function column-count {
    gawk 'BEGIN {FS="\t"} ; END{print NF}'
}

# Usage: find_and_replace $target $replacement
#
# Recursively search the files in the child directories for the target string,
# and replace the target string in place with replacement
#
# Improvements:  Could pass options to ack to improve filetypes searched
function find_and_replace  {
    target=$1
    replacement=$2
    ack -l $target | xargs -n 1 sed -i '' "s/$target/$replacement/g"
}

function reverse_tunnel {
    ssh -R $port:localhost:22
}
